{
  "stats": {
    "suites": 6,
    "tests": 7,
    "passes": 5,
    "pending": 0,
    "failures": 2,
    "start": "2025-08-23T18:34:14.196Z",
    "end": "2025-08-23T18:34:14.329Z",
    "duration": 133,
    "testsRegistered": 7,
    "passPercent": 71.42857142857143,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "45dfbe6b-2624-45d8-a907-4d0c9c4fb012",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "79ee98d9-415d-466c-bb5c-51584de0798f",
          "title": "Transfer Controller",
          "fullFile": "/Users/lucaslazarin/Desktop/PGATS/Automação de Testes na Camada de Serviço/API do zero/test/controller/transferController.test.js",
          "file": "/test/controller/transferController.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "84f5df1c-ce6f-4d59-b706-5d04a46255c5",
              "title": "POST /transfer",
              "fullFile": "/Users/lucaslazarin/Desktop/PGATS/Automação de Testes na Camada de Serviço/API do zero/test/controller/transferController.test.js",
              "file": "/test/controller/transferController.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"POST /transfer\"",
                  "fullTitle": "Transfer Controller POST /transfer \"before each\" hook in \"POST /transfer\"",
                  "timedOut": false,
                  "duration": 5,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "users.length = 0;\ntransfers.length = 0;\nusername = 'Lucas' + Date.now();\nawait request(app)\n    .post('/register')\n    .send({ username, password: '123456', favorecidos: [] });\nconst loginRes = await request(app)\n    .post('/login')\n    .send({ username, password: '123456' });\ntoken = loginRes.body.token;",
                  "err": {},
                  "uuid": "40f313e6-cebb-4b7e-97b7-ebea1d51f445",
                  "parentUUID": "84f5df1c-ce6f-4d59-b706-5d04a46255c5",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"POST /transfer\"",
                  "fullTitle": "Transfer Controller POST /transfer \"after each\" hook in \"POST /transfer\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.restore();",
                  "err": {},
                  "uuid": "d62243d5-4ddb-42a3-9f98-f6e1c71f527c",
                  "parentUUID": "84f5df1c-ce6f-4d59-b706-5d04a46255c5",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "Destinatário inexistente retorna 400",
                  "fullTitle": "Transfer Controller POST /transfer Destinatário inexistente retorna 400",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resposta = await request(app)\n    .post('/transfer')\n    .set('Authorization', `Bearer ${token}`)\n    .send({\n        from: username,\n        to: \"Cris\",\n        value: 400\n    });\nexpect(resposta.status).to.equal(400);\nexpect(resposta.body).to.have.property('error', 'Usuário remetente ou destinatário não encontrado.')",
                  "err": {},
                  "uuid": "6791cd30-1eab-4aa8-b0e9-d1f6add320a1",
                  "parentUUID": "84f5df1c-ce6f-4d59-b706-5d04a46255c5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Usando Mocks: Destinatário inexistente retorna 400",
                  "fullTitle": "Transfer Controller POST /transfer Usando Mocks: Destinatário inexistente retorna 400",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(transferService, 'transfer').returns({ error: 'Usuário remetente ou destinatário não encontrado.' });\nconst resposta = await request(app)\n    .post('/transfer')\n    .set('Authorization', `Bearer ${token}`)\n    .send({\n        from: username,\n        to: \"Cris\",\n        value: 400\n    });\nexpect(resposta.status).to.equal(400);\nexpect(resposta.body).to.have.property('error', 'Usuário remetente ou destinatário não encontrado.')",
                  "err": {},
                  "uuid": "638531cf-5562-4bce-94d0-0572a78283e7",
                  "parentUUID": "84f5df1c-ce6f-4d59-b706-5d04a46255c5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6791cd30-1eab-4aa8-b0e9-d1f6add320a1",
                "638531cf-5562-4bce-94d0-0572a78283e7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 8,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "2f772606-606a-45b0-b8f5-79930c91e8ed",
          "title": "Token validation",
          "fullFile": "/Users/lucaslazarin/Desktop/PGATS/Automação de Testes na Camada de Serviço/API do zero/test/controller/transferController.test.js",
          "file": "/test/controller/transferController.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return 401 if no token is provided",
              "fullTitle": "Token validation should return 401 if no token is provided",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const resposta = await request(app)\n    .post('/transfer')\n    .send({\n        from: \"Lucas\",\n        to: \"Cris\",\n        value: 400\n    });\nexpect(resposta.status).to.equal(401);\nexpect(resposta.body).to.have.property('error', 'Token não informado.');",
              "err": {},
              "uuid": "b04747b5-8eb8-4e57-b64b-73c003027df4",
              "parentUUID": "2f772606-606a-45b0-b8f5-79930c91e8ed",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 403 if token is invalid",
              "fullTitle": "Token validation should return 403 if token is invalid",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const resposta = await request(app)\n    .post('/transfer')\n    .set('Authorization', 'Bearer invalidtoken')\n    .send({\n        from: \"Lucas\",\n        to: \"Cris\",\n        value: 400\n    });\nexpect(resposta.status).to.equal(403);\nexpect(resposta.body).to.have.property('error', 'Token inválido.');",
              "err": {},
              "uuid": "ba530622-145f-4248-886c-4c92ef9f6b2d",
              "parentUUID": "2f772606-606a-45b0-b8f5-79930c91e8ed",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b04747b5-8eb8-4e57-b64b-73c003027df4",
            "ba530622-145f-4248-886c-4c92ef9f6b2d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "37003126-893a-4aac-a747-089ad12d3976",
          "title": "Transfer External",
          "fullFile": "/Users/lucaslazarin/Desktop/PGATS/Automação de Testes na Camada de Serviço/API do zero/test/external/transferExternal.test.js",
          "file": "/test/external/transferExternal.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "64d55805-c70a-4765-9627-147ff818c36e",
              "title": "POST /transfer",
              "fullFile": "/Users/lucaslazarin/Desktop/PGATS/Automação de Testes na Camada de Serviço/API do zero/test/external/transferExternal.test.js",
              "file": "/test/external/transferExternal.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Destinatário inexistente retorna 400",
                  "fullTitle": "Transfer External POST /transfer Destinatário inexistente retorna 400",
                  "timedOut": false,
                  "duration": 37,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const resposta = await request('http://localhost:3000')\n    .post('/transfer')\n    .send({\n        from: \"Lucas\",\n        to: \"Cris\",\n        value: 400\n    });\nexpect(resposta.status).to.equal(400);\nexpect(resposta.body).to.have.property('error', 'Usuário remetente ou destinatário não encontrado.')",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 400",
                    "estack": "AssertionError: expected 401 to equal 400\n    at Context.<anonymous> (test/external/transferExternal.test.js:20:40)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)",
                    "diff": "- 401\n+ 400\n"
                  },
                  "uuid": "0b93beed-2a14-425d-81aa-e46f8f1934b8",
                  "parentUUID": "64d55805-c70a-4765-9627-147ff818c36e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Usando Mocks: Destinatário inexistente retorna 400",
                  "fullTitle": "Transfer External POST /transfer Usando Mocks: Destinatário inexistente retorna 400",
                  "timedOut": false,
                  "duration": 3,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const transferServiceMock = sinon.stub(transferService, 'transfer')\n            transferServiceMock.returns({ error: 'Usuário remetente ou destinatário não encontrado.' })\n            \n            const resposta = await request('http://localhost:3000')\n                .post('/transfer')\n                .send({\n                    from: \"Lucas\",\n                    to: \"Cris\",\n                    value: 400\n                });\n                \n            expect(resposta.status).to.equal(400);\n            expect(resposta.body).to.have.property('error', 'Usuário remetente ou destinatário não encontrado.')\n            sinon.restore();",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 400",
                    "estack": "AssertionError: expected 401 to equal 400\n    at Context.<anonymous> (test/external/transferExternal.test.js:39:40)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)",
                    "diff": "- 401\n+ 400\n"
                  },
                  "uuid": "28066293-a8f7-40a7-84f3-3d0fd516d992",
                  "parentUUID": "64d55805-c70a-4765-9627-147ff818c36e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "0b93beed-2a14-425d-81aa-e46f8f1934b8",
                "28066293-a8f7-40a7-84f3-3d0fd516d992"
              ],
              "pending": [],
              "skipped": [],
              "duration": 40,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "023f0d87-c909-4022-93d5-fc2beb89bd40",
          "title": "Fixture Response Test",
          "fullFile": "/Users/lucaslazarin/Desktop/PGATS/Automação de Testes na Camada de Serviço/API do zero/test/response.test.js",
          "file": "/test/response.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should match the expected response for user registration",
              "fullTitle": "Fixture Response Test should match the expected response for user registration",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app)\n  .post('/register')\n  .send({\n    username: \"Lucas\",\n    password: \"123456\",\n    favorecidos: [\"Cris\"]\n  });\nObject.keys(expectedResponse).forEach(key => {\n  if (Array.isArray(expectedResponse[key])) {\n    expect(res.body[key]).to.deep.equal(expectedResponse[key]);\n  } else {\n    expect(res.body).to.have.property(key, expectedResponse[key]);\n  }\n});",
              "err": {},
              "uuid": "5496c69a-67ab-484b-b5ef-3be46112b31e",
              "parentUUID": "023f0d87-c909-4022-93d5-fc2beb89bd40",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5496c69a-67ab-484b-b5ef-3be46112b31e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}